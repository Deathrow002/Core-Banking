events {
    worker_connections 1024;
}

http {
    upstream account-service {
        # Eureka service discovery will provide these endpoints
        # For Docker Compose, we use service names with different scaled instances
        server account-service:8080 max_fails=3 fail_timeout=30s;
        # Additional instances will be added automatically when scaled
    }

    upstream transaction-service {
        server transaction-service:8080 max_fails=3 fail_timeout=30s;
    }

    upstream customer-service {
        server customer-service:8080 max_fails=3 fail_timeout=30s;
    }

    upstream authentication-service {
        server authentication-service:8080 max_fails=3 fail_timeout=30s;
    }

    # Health check for load balancer
    server {
        listen 80;
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Account Service Load Balancer
    server {
        listen 8080;
        
        location / {
            proxy_pass http://account-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Circuit breaker settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Retry logic
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
    }

    # Transaction Service Load Balancer
    server {
        listen 8081;
        
        location / {
            proxy_pass http://transaction-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
    }

    # Customer Service Load Balancer
    server {
        listen 8082;
        
        location / {
            proxy_pass http://customer-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
    }

    # Authentication Service Load Balancer
    server {
        listen 8083;
        
        location / {
            proxy_pass http://authentication-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
    }
}
