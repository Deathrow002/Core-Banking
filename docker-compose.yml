services:
  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_DB: lmwn_db
      POSTGRES_USER: lmwn_user
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5432:5432"
    networks:
      - core-bank-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lmwn_user -d lmwn_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:8.0.2
    ports:
      - "6379:6379"
    networks:
      - core-bank-network
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - redis_data:/data

  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - core-bank-network
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - core-bank-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      # Provisioning: JSON format preferred to avoid YAML validation issues
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=myuser         # <-- set your desired username
      - GF_SECURITY_ADMIN_PASSWORD=mypassword # <-- set your desired password
      # Enable anonymous access for easier setup (optional)
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # Default home dashboard
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/core-bank-overview.json

  discovery-service:
    build:
      context: .
      dockerfile: Discovery/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - core-bank-network
    environment:
      spring.application.name: discovery-service
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
    command: ["java", "-jar", "/app/discovery-service.jar"]
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent http://discovery-service:8761/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 300s  # Increase start period to 5 minutes

  account-service:
    build:
      context: .
      dockerfile: Account/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - core-bank-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      spring.application.name: account-service
      spring.datasource.url: jdbc:postgresql://postgres:5432/lmwn_db
      spring.datasource.username: lmwn_user
      spring.datasource.password: 12345678
      eureka.client.service-url.defaultZone: http://discovery-service:8761/eureka
      spring.redis.host: redis  # Ensure this is 'redis'
      spring.redis.port: 6379
      encryption.secret-key: 1234567890123456
    command: [ "java", "-jar", "/app/account-service.jar" ]
    healthcheck:
      test: [ "CMD", "curl", "--fail", "--silent", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  customer-service:
    build:
      context: .
      dockerfile: Customer/Dockerfile
    ports:
      - "8083:8083"
    networks:
      - core-bank-network
    depends_on:
      account-service:
        condition: service_healthy
    environment:
      spring.application.name: customer-service
      spring.datasource.url: jdbc:postgresql://postgres:5432/lmwn_db
      spring.datasource.username: lmwn_user
      spring.datasource.password: 12345678
      eureka.client.service-url.defaultZone: http://discovery-service:8761/eureka
      spring.redis.host: redis
      spring.redis.port: 6379
    command: ["java", "-jar", "/app/customer-service.jar"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  transaction-service:
    build:
      context: .
      dockerfile: Transaction/Dockerfile
    ports:
      - "8082:8082"
    networks:
      - core-bank-network
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      account-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      spring.application.name: transaction-service
      spring.datasource.url: jdbc:postgresql://postgres:5432/lmwn_db
      spring.datasource.username: lmwn_user
      spring.datasource.password: 12345678
      eureka.client.service-url.defaultZone: http://discovery-service:8761/eureka
      spring.redis.host: redis
      spring.redis.port: 6379
      encryption.secret-key: 1234567890123456
    command: ["java", "-jar", "/app/transaction-service.jar"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  authtication-service:
    build:
      context: .
      dockerfile: Authentication/Dockerfile
    ports:
      - "8084:8084"
    networks:
      - core-bank-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      customer-service:
        condition: service_healthy
    environment:
      spring.application.name: authentication-service
      spring.datasource.url: jdbc:postgresql://postgres:5432/lmwn_db
      spring.datasource.username: lmwn_user
      spring.datasource.password: 12345678
      eureka.client.service-url.defaultZone: http://discovery-service:8761/eureka
      spring.redis.host: redis
      spring.redis.port: 6379
    command: ["java", "-jar", "/app/authentication-service.jar"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "WHUYTAUFRdyM63Rj0YoKJw=="  # A unique ID for the Kafka cluster.
    networks:
      - core-bank-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/var/lib/kafka/data  # Store Kafka logs on your local machine.
    command:
      - bash
      - -c
      - |
        if [ ! -f "/var/lib/kafka/data/meta.properties" ]; then
          /usr/bin/kafka-storage format -t WHUYTAUFRdyM63Rj0YoKJw== -c /etc/kafka/server.properties
        fi
        /etc/confluent/docker/run
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

networks:
  core-bank-network:
    name: core-bank-network
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data_volume
  redis_data:
    name: redis_data_volume
  grafana_data:
    name: grafana_data_volume
  kafka_data:
    name: kafka_data_volume
  loki_data:
    name: loki_data_volume
